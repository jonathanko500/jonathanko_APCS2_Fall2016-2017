<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Kai Toedter: Deploying Spring Boot Apps to Heroku using Docker</title>
	<guid isPermaLink="false">http://toedter.com/?p=1477</guid>
	<link>http://toedter.com/2016/11/05/deploying-spring-boot-apps-to-heroku-using-docker/</link>
	<description>&lt;p&gt;I am using &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt; for a long time now. The usual deployment method for me was to push a Git repository to Heroku, then build and run the software in their cloud. Since a long time, Heroku supports also Docker deployment, but in the past I found it a bit to restrictive. Now it is possible to deploy web applications as Docker images very easily. As an example I have a continuous delivery pipeline (using &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt;) up and running that deploys the same docker image to both DockerHub and Heroku. As base I take my Open Source Playground &lt;a href=&quot;https://github.com/toedter/chatty&quot;&gt;Chatty&lt;/a&gt;. In this blog I explain how this is done.&lt;/p&gt;
&lt;p&gt;One restriction of the Heroku Docker deployment is that the web server has to run on a port specified by the environment variable PORT. In Spring there are many ways for doing this. I decided to manually override Springs’s server.port property, when the application finds out at run-time that it is running in an Heroku environment, checking the environment variables DYNO and PORT:&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;public static void main(String[] args) throws Exception {

    String ENV_PORT = System.getenv().get(&quot;PORT&quot;);
    String ENV_DYNO = System.getenv().get(&quot;DYNO&quot;);
    if(ENV_PORT != null &amp;amp;&amp;amp; ENV_DYNO != null) {
        System.getProperties().put(&quot;server.port&quot;, ENV_PORT);
    }

    SpringApplication.run(Chatty.class, args);
}
&lt;/pre&gt;
&lt;p&gt;To do a Docker deployment, you have to login into the Heroku registry first. For that you need to know the your Heroku auth token. The easiest way to get it is to login to Heroku using the CLI and then type&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: false; title: ; notranslate&quot;&gt;heroku auth:token
&lt;/pre&gt;
&lt;p&gt;This will return a token like ea405d9e-76ff-4881-acbd-327c28efa3be. Now you can login to the Heroku Docker registry with&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: false; title: ; notranslate&quot;&gt;docker login --email=_ --username=_ --password=&quot;ea405d9e-76ff-4881-acbd-327c28efa3be&quot; registry.heroku.com
&lt;/pre&gt;
&lt;p&gt;Then you have to tag your Docker image like&lt;/p&gt;
&lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot;&gt;docker tag &amp;lt;image&amp;gt; registry.heroku.com/&amp;lt;app&amp;gt;/&amp;lt;process-type&amp;gt;, e.g.
docker tag kaitoedter/chatty registry.heroku.com/chatty42/web
&lt;/pre&gt;
&lt;p&gt;You could simply put the scripting in a .travis.yml file and hide the Heroku auth token in an environment variable, like&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: false; title: ; notranslate&quot;&gt;  - docker login --email=_ --username=_ --password=&quot;$HEROKU_AUTH_TOKEN&quot; registry.heroku.com
  - docker tag kaitoedter/chatty registry.heroku.com/chatty42/web
  - docker push registry.heroku.com/chatty42/web
&lt;/pre&gt;
&lt;p&gt;You find the Chatty .travis.yml &lt;a href=&quot;https://github.com/toedter/chatty/blob/master/.travis.yml&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
A running container is always available at &lt;a href=&quot;https://chatty42.herokuapp.com&quot;&gt;https://chatty42.herokuapp.com&lt;/a&gt;&lt;br /&gt;
Since Heroku is shutting down the service when there are no users, please give it a bit of time to start up.&lt;/p&gt;
&lt;p&gt;As conclusion I find the deployment of custom Docker images to Heroku even easier than the previous git deployment.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://toedter.com/?flattrss_redirect&amp;amp;id=1477&amp;amp;md5=f283b6cb40f47289939b61a4f87c67a3&quot;&gt;&lt;img alt=&quot;Flattr this!&quot; src=&quot;http://toedter.com/wp-content/plugins/flattr/img/flattr-badge-white.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Sat, 05 Nov 2016 17:38:12 +0000</pubDate>
</item>
<item>
	<title>Fabio Zadrozny: LiClipse 3.2.1</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7855001383687474475.post-2620458055770009520</guid>
	<link>http://liclipse.blogspot.com/2016/11/liclipse-321.html</link>
	<description>The new LiClipse release is out.&lt;br /&gt;&lt;br /&gt;The major updates were actually to PyDev, which has fixes such as a regression added on 5.3.0 where &lt;b&gt;Ctrl+1&lt;/b&gt; was not properly resolving symbols from dependent projects, code analysis on a particular case with &lt;b&gt;PEP 448&lt;/b&gt; (list unpacking), auto-indents &lt;b&gt;async&lt;/b&gt; and &lt;b&gt;await &lt;/b&gt;blocks, highlights &lt;b&gt;async &lt;/b&gt;and &lt;b&gt;await &lt;/b&gt;blocks and fixes an issue in the code completion using from..import..as aliases.&lt;br /&gt;&lt;br /&gt;It does have one new feature in which &lt;b&gt;Ctrl+Shift+O&lt;/b&gt; (which fixes unresolved tokens by adding the needed imports) uses the improved sorting also used for the code-completion (so that tokens from the project appear before tokens from other projects, which in turn appear before tokens from the standard library). Also, the &lt;b&gt;substring completion&lt;/b&gt; is now &lt;b&gt;on by default&lt;/b&gt; (it may be turned off in the code-completion preferences).&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Still, besides the updates to PyDev, the stock LiClipse themes were improved so that the current selected tab colors (on the active or inactive views) can be configured (&lt;b&gt;selectedTabInitialBackground &lt;/b&gt;and &lt;b&gt;selectedTabActiveInitialBackground&lt;/b&gt; in the theme preferences) and some colors were changed to have better defaults in a number of themes.&lt;/div&gt;</description>
	<pubDate>Fri, 04 Nov 2016 09:28:06 +0000</pubDate>
	<author>noreply@blogger.com (Fabio Zadrozny)</author>
</item>
<item>
	<title>Pascal Rapicault: 5 reasons to use EGerrit - #2, Compare against workspace</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-27225531.post-6272363565809586389</guid>
	<link>http://prapicault.blogspot.com/2016/11/5-reasons-to-use-egerrit-2-compare.html</link>
	<description>To celebrate the release of &lt;a href=&quot;http://wiki.eclipse.org/EGerrit/New_and_Noteworthy/1.1.1&quot;&gt;EGerrit 1.1&lt;/a&gt;, we are enumerating the &lt;a href=&quot;http://prapicault.blogspot.ca/2016/10/5-reasons-to-use-egerrit-5-being-in.html&quot;&gt;top&lt;/a&gt; &lt;a href=&quot;http://prapicault.blogspot.com/2016/10/5-reasons-to-use-egerrit-4-simple.html&quot;&gt;5&lt;/a&gt; &lt;a href=&quot;http://5-reasons-to-use-egerrit-3-in-place.html/&quot;&gt;features&lt;/a&gt; of the tool.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;&lt;b&gt;Reason #2, Compare against workspace.&lt;/b&gt;&lt;/h2&gt;When you’ve authored a review and are receiving feedback, your next duty is to take this feedback into account. In order to make that as simple as possible, the compare editor offers the ability to show on one side the patchset that contains the comments, and on the other the files from the workspace in which you can directly code your changes (see picture).&lt;br /&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;float: left; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-ikF68j28e6g/WA97-X-WAiI/AAAAAAAAAUk/uikMhNeRtZgjnnRbc2sj8vS1n_0YkFZIQCK4B/s1600/ReplyToComment.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img alt=&quot;Taking comments into accounts&quot; border=&quot;0&quot; height=&quot;249&quot; src=&quot;https://1.bp.blogspot.com/-ikF68j28e6g/WA97-X-WAiI/AAAAAAAAAUk/uikMhNeRtZgjnnRbc2sj8vS1n_0YkFZIQCK4B/s640/ReplyToComment.png&quot; title=&quot;Taking comments into accounts&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Taking comments into account.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;&lt;b&gt;How to make that work?&lt;/b&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Download the review (so the most recent revision is now in your workspace);&lt;/li&gt;&lt;li&gt;open the compare editor;&lt;/li&gt;&lt;li&gt;and set the revision with comments on the left side of the compare editor and the workspace on the right side.&lt;/li&gt;&lt;/ul&gt;Now, as you are going through the comments, you can directly take them into account without even going back to a full blown editor. Pretty slick isn’t it?&lt;br /&gt;&lt;br /&gt;Comparing a patchset to the files in the workspace has additional benefits:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Gauge the impact of an incoming review on your on-going work. Let’s say that while you are working on a new feature, someone publishes a new review touching some of the files you are modifying. Using the compare with workspace feature, you can quickly see if and how the changes in the new review overlaps with your on-going work;&lt;/li&gt;&lt;li&gt;Measure the impact of an additional change you would like to do on the current review. Let’s imagine that you would like to perform additional changes in the code under review, then you could simply start editing the code and then see how much extra changes it creates on top of the existing one. &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;You can download EGerrit from the &lt;a href=&quot;http://download.eclipse.org/releases/neon&quot; target=&quot;_blank&quot;&gt;Neon release &lt;/a&gt;repo or from the &lt;a href=&quot;http://marketplace.eclipse.org/content/egerrit&quot; target=&quot;_blank&quot;&gt;Eclipse Marketplace&lt;/a&gt;. For questions, you can connect with us on &lt;a href=&quot;https://dev.eclipse.org/mailman/listinfo/egerrit-dev&quot;&gt;egerrit-dev@eclipse.org&lt;/a&gt;; and for bugs or to take a peek at the future you can see our &lt;a href=&quot;https://tuleap.eclipse.org/plugins/agiledashboard/?group_id=102&amp;amp;action=showKanban&amp;amp;id=6#/kanban&quot; target=&quot;_blank&quot;&gt;Kanban board&lt;/a&gt;.</description>
	<pubDate>Fri, 04 Nov 2016 05:30:14 +0000</pubDate>
	<author>noreply@blogger.com (Pascal)</author>
</item>
<item>
	<title>VIATRA: VIATRA 1.4.1 released</title>
	<guid isPermaLink="false">5614faafe4b03f677dc3822b:56153118e4b022593e35e24b:581b70a99de4bba71073db68</guid>
	<link>https://viatra.net/news/2016/11/viatra-141-released</link>
	<description>&lt;p&gt;The &lt;a href=&quot;http://eclipse.org/viatra&quot; target=&quot;_blank&quot;&gt;VIATRA project&lt;/a&gt; is happy to report that the service release 1.4.1 is now available, with some &lt;a href=&quot;https://projects.eclipse.org/projects/modeling.viatra/releases/1.4.1/bugs&quot; target=&quot;_blank&quot;&gt;hotfixes&lt;/a&gt; for our 1.4.0 version. These fixes handles regressions with regards to tooling and runtime components as well. Furthermore, this release widens the compatibility with Xtext versions, making this version available in Eclipse releases from Mars to Oxygen.&lt;/p&gt;&lt;p&gt;All downloads are available now from the &lt;a href=&quot;https://www.eclipse.org/viatra/downloads.php&quot; target=&quot;_blank&quot;&gt;downloads area&lt;/a&gt; or the &lt;a href=&quot;http://marketplace.eclipse.org/content/viatra&quot; target=&quot;_blank&quot;&gt;marketplace&lt;/a&gt;. All existing users are recommended to upgrade.&lt;/p&gt;&lt;p&gt;Feel free to reach out on the Eclipse Forums of VIATRA or the developer mailing list if you have questions or request &lt;a href=&quot;http://incquerylabs.com/&quot; target=&quot;_blank&quot;&gt;industrial support&lt;/a&gt; for more advanced issues.&lt;/p&gt;</description>
	<pubDate>Thu, 03 Nov 2016 17:29:42 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: EclipseCon Europe 2016 So Glad to be Back</title>
	<guid isPermaLink="false">http://cdtdoug.ca/?p=783</guid>
	<link>https://cdtdoug.ca/2016/11/03/eclipsecon-europe-2016-so-glad-to-be-back/</link>
	<description>&lt;p&gt;I spent a good chunk of the week trying to figure out the last time I was at EclipseCon Europe. The last thing I remember was spending a night in the Nestor bar until 5 a.m. with a handful of attendees, including Torkild, with the honored presence of Dave Thomas, the spiritual founder of Eclipse. That was 2008! It’s been eight years! I’ve missed so much. But I’m so glad that things in my life have cleared up to enable me to attend and I don’t expect I’ll miss another one for a while.&lt;/p&gt;
&lt;p&gt;My biggest take away from the conference is simply the diversity of the people interested in Eclipse and the diversity of things happening at Eclipse. There’s still a large chunk of it related to the RCP platform and the IDE we build on top of it. But there’s really cool things happening with the Science and IoT groups as well. And the OSGi lego train display was mesmerizing but really showed off OSGi’s roots in the industrial space.&lt;/p&gt;
&lt;p&gt;The week started with the CDT Summit on Monday. We had a good representation from different companies who build tools based on the CDT. We had a mini demo camp where they had the opportunity to show off what they’re doing. There’s some really cool stuff happening. It’s great to see them trying to make the complex world of embedded development simpler to understand through some great visualizations. We also noticed a couple of areas where the different vendors are building the same functionality. Those are great opportunities to collaborate in the open and the CDT project is very welcoming to new things. Finally it was very interesting to see how all the vendors really rely on our managed build GUI to simplify compiler and other build settings for users. That’s something we’ll need to carry forward into the new Core Build system (which I still need to blog about, stay tuned for that).&lt;/p&gt;
&lt;p&gt;On Tuesday, I had my talk where I showed off Eclipse for embedded. It’s really a showcase of all the hard work we’ve done to simplify CDT for embedded development and to support open frameworks that users are using today, including Arduino, Qt, CMake, ESP8266, etc. It also shows why Eclipse is so important to us in the embedded world. IoT is a marketing buzzword, but it’s also an architecture that many of us have used in the past and which is growing thanks to accessible cloud platforms. These days, you need to program both your Arduino and your cloud service and Eclipse lets you do those things with a single IDE.&lt;/p&gt;
&lt;p&gt;The rest of the week was spent chatting with my open source collegues, building relationships, getting a feel for the current state of the Eclipse IDE and where we need to go in the future. The Visual Studio Code keynote from Dirk Baeumer we very eye opening. I’ve been studying VS.Code for a few months trying to get a sense of what it’s appeal is and whether a desktop IDE based on a Web frontend is the new modern way of building IDEs. Now VS.Code isn’t an IDE, or at least it’s not as much an IDE as the Eclipse IDE is. We have a lot of tools that render different sorts of data visually in Eclipse and those high value things need to carry forward in any new world. But it’s food for thought and I’m going to invest some time to see what can be done there.&lt;/p&gt;
&lt;p&gt;As Mike loves to say in his keynotes, Eclipse is many things. I think first and foremost, it’s a community. Technologies come and go, and individual people come and go, but there always seems to be a great energy when we come together. The task for us is to carry that energy forward into our day-to-day work and keep momentum going on all the great things we talked about. It’s not easy, but it’s why we need to be there.&lt;/p&gt;</description>
	<pubDate>Thu, 03 Nov 2016 14:58:02 +0000</pubDate>
</item>
<item>
	<title>Jens von Pilgrim: BoF @ ECE2016: Eclipse and AsciiDoc</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-4884093826755448868.post-2808276505353226707</guid>
	<link>http://jevopisdeveloperblog.blogspot.com/2016/11/bof-ece2016-eclipse-and-asciidoc.html</link>
	<description>&lt;p&gt;
At &lt;a href=&quot;http://www.numberfour.eu/&quot;&gt;NumberFour&lt;/a&gt;, we use AsciiDoc for our specifications and documentation. We are even working on producing AsciiDoc API documentation from &lt;a href=&quot;http://usejsdoc.org/&quot;&gt;JSDoc-like&lt;/a&gt; comments (similar to JavaDoc) for our JavaScript language &lt;a href=&quot;http://numberfour.github.io/n4js/&quot;&gt;N4JS&lt;/a&gt;. Since we ran into a couple of problems with AsciiDoctor, I thought that it might be interesting to learn what other people in the Eclipse Community think about AsciiDoc(tor) and if we might be able to &quot;join forces&quot; to overcome certain obstacles. So I organized a &quot;Birds of Feather&quot; about &quot;Documentation with AsciiDoc and Eclipse&quot; at &lt;a href=&quot;https://www.eclipsecon.org/europe2016/&quot;&gt;EclipseCon 2016 Europe&lt;/a&gt;. We were about 10 participants and this blog post serves more or less as a kind of meeting minutes of this BoF combined with our findings at NumberFour.
&lt;/p&gt;

&lt;p&gt;
AsciiDoc is a lightweight markup language, similar to Markdown. The original &lt;a href=&quot;http://www.methods.co.nz/asciidoc/&quot;&gt;AsciiDoc&lt;/a&gt; was written in Python, but &lt;a href=&quot;http://asciidoctor.org/&quot;&gt;Asciidoctor&lt;/a&gt;, probably the most popular tool nowadays, is written in Ruby with a variant &lt;a href=&quot;https://github.com/asciidoctor/asciidoctorj&quot;&gt;AsciidoctorJ&lt;/a&gt; which provides Java support (via JRuby) and &lt;a href=&quot;https://github.com/asciidoctor/asciidoctor.js&quot;&gt;Asciidoctor.js&lt;/a&gt; for JavaScript (via &lt;a href=&quot;http://opalrb.org/&quot;&gt;Opal&lt;/a&gt;). From an Asciidoc document (.adoc) you can either create HTML, PDF or even EPub. Unfortunately, the PDF support is lacking some major features (e.g., footnotes are not supported yet), but there is a common workaround to produce DocBook XML files from AsciiDoctor and then use FOP to eventually create a beautiful PDF. Lars Vogel wrote a nice &lt;a href=&quot;http://www.vogella.com/tutorials/AsciiDoc/article.html&quot;&gt;tutorial about AsciiDoc and AsciiDoctor&lt;/a&gt;. One of the great things about AsciiDoc is that &lt;a href=&quot;http://asciidoctor.org/news/2013/01/30/asciidoc-returns-to-github/&quot;&gt;GitHub provides basic support for AsciiDoc&lt;/a&gt; as well!
&lt;/p&gt;

&lt;h2&gt;Writing AsciiDoc&lt;/h2&gt;
&lt;p&gt;
The first question is how to write AsciiDoc. One solution is to use stand-alone editors such as Sublime (there is an &lt;a href=&quot;https://github.com/asciidoctor/sublimetext-asciidoc&quot;&gt;AsciiDoc plug-in&lt;/a&gt; for syntax highlighting and coce completion which, together with the &lt;a href=&quot;https://github.com/timonwong/OmniMarkupPreviewer&quot;&gt;preview plug-in&lt;/a&gt;, is a really great solution). 
&lt;/p&gt;

&lt;p&gt;
But usually, you do not want to switch editors when you are already using Eclipse. Fortunately, there's an existing &lt;a href=&quot;https://wiki.eclipse.org/Mylyn/WikiText/AsciiDoc&quot;&gt;AsciiDoc editor&lt;/a&gt; which is part of &lt;a href=&quot;https://wiki.eclipse.org/Mylyn/WikiText&quot;&gt;Mylyn Wiki Text&lt;/a&gt;. This editor has some syntax highlighting, an outline view and even a preview.
&lt;/p&gt;
&lt;p&gt;
This editor seems to be a good starting point for further support of AsciiDoc on the Eclipse platform, although it might have some shortcomings with regard to features and design. Regardless, the BoF participants (including Torkild, a Mylyn Docs committer) decided to use the &lt;a href=&quot;https://dev.eclipse.org/mailman/listinfo/mylyn-docs-dev&quot;&gt;mylyn-docs developers mailing list&lt;/a&gt; for further communication about AsciiDoc and Eclipse.
&lt;/p&gt;
&lt;p&gt;
Apparently, having a good editor, possibly even with &lt;a href=&quot;https://en.wikipedia.org/wiki/WYSIWYG&quot;&gt;WYSIWYG&lt;/a&gt; or at least &lt;a href=&quot;https://en.wikipedia.org/wiki/WYSIWYM&quot;&gt;WYSIWYM&lt;/a&gt; support is one of the most important things required.
&lt;/p&gt;
&lt;h2&gt;Building AsciiDoc&lt;/h2&gt;
&lt;p&gt;
There are several ways of building AsciiDoc. The most simple one is about using the AsciiDoctor tools directly from the command line. There is also a &lt;a href=&quot;http://asciidoctor.org/docs/  asciidoctor-maven-plugin/&quot;&gt;Maven plugin&lt;/a&gt; provided by the AsciiDoctor project.
&lt;/p&gt;
&lt;p&gt;
We haven't discussed that topic any further though. It seems as if the existing tools are sufficient even though there are some shortcomings when using custom macros as described below. You may have a look at the N4JS &lt;a href=&quot;https://github.com/NumberFour/n4js/blob/master/docs/eu.numberfour.n4js.doc/pom.xml&quot;&gt;documentation pom.xml&lt;/a&gt; to get an idea of how this could look like.
&lt;/p&gt;

&lt;h2&gt;Converting to AsciiDoc&lt;/h2&gt;
&lt;p&gt;
During the BoF, the question came up how to convert existing documentation written in other formats to Asciidoc. One solution for that is &lt;a href=&quot;http://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt;, which we (at NumberFour) are using to convert our LaTeX specification to Asciidoc.

Jeremie Bresson has already &lt;a href=&quot;http://jmini.github.io/blog/2016/2016-10-28_from_mediawiki_to_asciidoc.html&quot;&gt;blogged about the BoF&lt;/a&gt; and even provided a solution for using Mylyn Wikitext to convert Eclipse MediaWiki to Asciidoc. Thank you very much, Jeremie!

&lt;/p&gt;&lt;h2&gt;Using AsciiDoc as a Single Source&lt;/h2&gt;
&lt;p&gt;
I already mentioned above that you can generate HTML and PDF from AsciiDoc. However, HTML is not HTML. We use AsciiDoc to generate
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the public web site (i.e., gh-pages)&lt;/li&gt;
&lt;li&gt;the Eclipse help&lt;/li&gt;
&lt;li&gt;the PDF specification&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
from a single asciidoc file. To give you an idea, have a look at an &lt;a href=&quot;https://github.com/NumberFour/n4js/blob/master/docs/eu.numberfour.n4js.doc/src/features/dependency-injection.adoc&quot;&gt;adoc source file&lt;/a&gt; and the &lt;a href=&quot;http://numberfour.github.io/n4js/features/dependency-injection.html&quot;&gt;generated web page&lt;/a&gt;. If you download the &lt;a href=&quot;http://numberfour.github.io/n4js/index.html#getting-started&quot;&gt;N4JS IDE&lt;/a&gt;, you can also have a look at the &lt;a href=&quot;https://github.com/NumberFour/n4js/blob/master/docs/eu.numberfour.n4js.doc/dist/eclipse-html/features/dependency-injection.html&quot;&gt;generated Eclipse help&lt;/a&gt; containing the same content. The PDF is not publicly available yet, we are currently working on migrating our language specification from LaTeX to AsciiDoc.
&lt;/p&gt;
&lt;p&gt;
In order to generate Eclipse help, a table of contents file is required. At the moment, we generate them via the &lt;a href=&quot;https://github.com/jmini/geneclipsetoc&quot;&gt;geneclipsetoc-maven-plugin&lt;/a&gt; Maven plugin, see our &lt;a href=&quot;https://github.com/NumberFour/n4js/blob/master/docs/eu.numberfour.n4js.doc/pom.xml#L255&quot;&gt;pom.xml&lt;/a&gt; for our configuration.
&lt;/p&gt;
&lt;p&gt;
You may also use the Mylyn Docs to generate code, which is described in the &lt;a href=&quot;http:// help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.mylyn.wikitext.help.ui%2Fhelp%2FMarkup-Generation.html&quot;&gt;Mylyn Docs Eclipse help&lt;/a&gt;. This also provides support for &lt;a href=&quot;https://wiki.eclipse.org/Mylyn/Docs/EPUB&quot;&gt;generating EPub&lt;/a&gt;, the first steps towards this support has already been described 2011 in &lt;a href=&quot;https://resheim.net/2011/11/getting-to-epub-support-in-eclipse.html&quot;&gt;Torkild's blog&lt;/a&gt;!
It’s now a stable part of Mylyn Docs and has been for a few years. Currently it is in maintenance mode as there are few bugs and there is not much to add – apart for EPUB 3.0 support. You can find an EPUB examples (and presentations about Mylyn Docs in general) on &lt;a href=&quot;https://github.com/turesheim/mylyn-docs-examples&quot;&gt;Torkild's GitHub page&lt;/a&gt;.
&lt;/p&gt;


&lt;h2&gt;Customizing AsciiDoc&lt;/h2&gt;
&lt;p&gt;
Although AsciiDoc provides a lot of features (&quot;macros&quot; in Asciidoc terminology) for technical documentation, such as source blocks, warning blocks etc., we (at NumberFour) missed some functionality. We required additional support for 
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;definitions -- a typical feature required in specifications&lt;/li&gt;
&lt;li&gt;BibTex cites and bibliographies -- we already have a large BibTex database which we want to reuse&lt;/li&gt;
&lt;li&gt;todos -- well, also a typical feature required in specifications and documentations&lt;/li&gt;
&lt;li&gt;links to source code -- e.g., for adding links to either GitHub, or, in case of Eclipse help, to the files in the workspace&lt;/li&gt;
&lt;li&gt;larger documents, e.g., includes similar to &lt;a href=&quot;https://www.ctan.org/tex-archive/macros/latex/contrib/chapterfolder?lang=en&quot;&gt;LaTeX's chapter folders&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
One problem we found is that Ruby-based custom macros calling native code cannot be used with AscidoctorJ. E.g., there already exists a &lt;a href=&quot;https://github.com/asciidoctor/asciidoctor-bibtex&quot;&gt;custom Ruby macro&lt;/a&gt; which provides support for BibTex, but this does not work with AscidoctorJ. We want to write the macros in Java, since we plan to provide some editor support in Eclipse as well -- and then Java would be the better solution. Thus we already wrote our own Java-based, BibTex macro (&lt;a href=&quot;https://github.com/asciidoctor/asciidoctorj/pull/509&quot;&gt;fixing some&lt;/a&gt; smaller AsciidoctorJ problems on the way) and we are also working on solutions for the other topics. If you are interested in that, or if you have written Java-based macros for AsciiDoc as well -- let me know! We haven't open sourced our custom macros yet since they are still under (heavy) development. But we will probably do that once they are in a state to make them public.
&lt;/p&gt;


&lt;p&gt;
&lt;i&gt;Edit: Updated description of EPUB support -- thank you Torkild for the information!&lt;/i&gt;
&lt;/p&gt;</description>
	<pubDate>Thu, 03 Nov 2016 13:00:45 +0000</pubDate>
	<author>noreply@blogger.com (Jens v.P.)</author>
</item>
<item>
	<title>Benjamin Cabe: Live demo of AutoFOCUS at EclipseCon Europe 2016</title>
	<guid isPermaLink="false">https://blog.benjamin-cabe.com/?p=2718</guid>
	<link>http://feedproxy.google.com/~r/benjamin-cabe-planet-eclipse/~3/DTG3YU-63G8/live-demo-of-autofocus-at-eclipsecon-europe-2016</link>
	<description>&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AF3 (AutoFOCUS3)&lt;/strong&gt; is an open-source, model-based, development tool for distributed, reactive, embedded software systems.&lt;br /&gt;
At EclipseCon Europe 2016, I spent a few minutes chatting with Johannes Eder and Thomas Böhm from the project team to learn more about the project.&lt;/p&gt;
&lt;p&gt;You can check out the project website at &lt;a href=&quot;http://af3.fortiss.org&quot;&gt;http://af3.fortiss.org&lt;/a&gt;&lt;/p&gt;
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/benjamin-cabe-planet-eclipse/~4/DTG3YU-63G8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 03 Nov 2016 11:26:39 +0000</pubDate>
</item>
<item>
	<title>itemis: Language development on .NET with Xtext – Part 2: Creating a .NET assembly from an Xtext DSL</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/language-development-on-.net-with-xtext-part-2-creating-a-dotnet-assembly-from-an-xtext-dsl</guid>
	<link>https://blogs.itemis.com/en/language-development-on-.net-with-xtext-part-2-creating-a-dotnet-assembly-from-an-xtext-dsl</link>
	<description>&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;In the first part of this blog series we have introduced an &lt;a href=&quot;https://hosting.itemis.de/en/language-development-on-.net-with-xtext-part-1-overview&quot;&gt;example use case of integrating an Xtext DSL in a C# command-line calculator&lt;/a&gt;. This post will go into the details of how to use Maven to create a .NET assembly containing the DSL and Xtext runtime classes which are necessary for writing the calculator application.&lt;/p&gt;  
&lt;p&gt;&lt;span&gt;After starting with an overview of the project structure, we will focus on how to create a .NET assembly by first constructing an Uber JAR that includes all dependencies and then converting it to an assembly using IKVM.NET. &lt;/span&gt;The &lt;a href=&quot;https://github.com/stadlerb/ikvm-arithmetics-cli&quot;&gt;source code&lt;/a&gt; of the project is available on GitHub.&lt;/p&gt; 
&lt;h2&gt;Project structure&lt;/h2&gt; 
&lt;p&gt;As build tool &lt;a href=&quot;https://www.itemis.com/en/xtext/&quot;&gt;Xtext&lt;/a&gt; offers the choice between &lt;a href=&quot;https://maven.apache.org&quot;&gt;Maven&lt;/a&gt; and &lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt;. In this example, Maven is employed as the Gradle build has only been added recently and the Maven build is more stable.&lt;/p&gt; 
&lt;p&gt;The basic project structure conforms to Xtext's default Maven layout and consists of the root project &lt;code&gt;org.eclipse.xtext.example.arithmetics.parent&lt;/code&gt; and the Xtext DSL project &lt;code&gt;org.eclipse.xtext.example.arithmetics&lt;/code&gt;, which are generated by Xtext's New Project wizard.&lt;br /&gt;&lt;br /&gt;The root project is used as a parent project to specify shared configuration items and serves as an aggregator project that provides a single build for all sub-projects. The Xtext DSL project is essentially the Xtext Simple Arithmetics example, adapted for Maven and with a few improvements for the CLI calculator application. The &lt;code&gt;org.eclipse.example.arithmetics.dotnet&lt;/code&gt; project was manually created and is responsible for creating a .NET assembly (a &lt;code&gt;dll&lt;/code&gt; file) that can be used to consume the DSL in C#.&lt;/p&gt; 
&lt;p&gt;The project structure consisting of the root project and the child projects &lt;code&gt;org.eclipse.example.arithmetics&lt;/code&gt; and &lt;code&gt;org.eclipse.example.arithmetics.dotnet&lt;/code&gt; is summarized in the figure below:&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Project structure&quot; src=&quot;https://github.com/itemis/itemis-blog/raw/ikvm-xtext-standalone/ikvm-xtext-standalone/project-structure.png&quot; style=&quot;width: 519px; display: block; margin-left: auto; margin-right: auto;&quot; title=&quot;Project structure&quot; width=&quot;519&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Creating a .NET assembly for consuming the DSL in C#&lt;/h2&gt; 
&lt;p&gt;Now that we have an overview of the project structure, we can direct our attention to the actual creation of the DLL, which consists of two steps: First creating an Uber JAR from all transitive dependencies of the &lt;code&gt;org.eclipse.example.arithmetics.dotnet&lt;/code&gt; project using the Maven Shade plugin and then converting the Uber JAR to a DLL as the project's main artifact using IKVM.NET.&lt;/p&gt; 
&lt;p&gt;In the following subsections we will provide a more detailed description of the DLL creation process.&lt;/p&gt; 
&lt;h2&gt;Creating a Uber JAR with the Shade plugin&lt;/h2&gt; 
&lt;p&gt;An Uber JAR is a JAR that includes a project and its direct and indirect dependencies and is produced by merging the JARs of the project and all its dependencies into a single, &quot;fat&quot; JAR.&lt;br /&gt;In order to create an Uber JAR from the dependencies of the dotnet project, we include the Shade plugin in the POM of the project, which performs the merging of all Maven dependencies into a Uber JAR.&lt;/p&gt; 
&lt;pre class=&quot;prettyprint linenums norowcolors hl8&quot;&gt;&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;maven-shade-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;executions&amp;gt;
    &amp;lt;execution&amp;gt;
      &amp;lt;id&amp;gt;ikvmShade&amp;lt;/id&amp;gt;
      &amp;lt;goals&amp;gt;
        &amp;lt;goal&amp;gt;shade&amp;lt;/goal&amp;gt;
      &amp;lt;/goals&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;artifactSet&amp;gt;
          &amp;lt;excludes&amp;gt;
            &amp;lt;exclude&amp;gt;org.eclipse.xtext.example.arithmetics:org.eclipse.xtext.example.arithmetics.dotnet&amp;lt;/exclude&amp;gt;
          &amp;lt;/excludes&amp;gt;
        &amp;lt;/artifactSet&amp;gt;
        &amp;lt;createDependencyReducedPom&amp;gt;false&amp;lt;/createDependencyReducedPom&amp;gt;
        &amp;lt;outputFile&amp;gt;${project.build.directory}/${project.build.finalName}-shaded.jar&amp;lt;/outputFile&amp;gt;
        &amp;lt;filters&amp;gt;
          &amp;lt;filter&amp;gt;
            &amp;lt;artifact&amp;gt;*:*&amp;lt;/artifact&amp;gt;
            &amp;lt;excludes&amp;gt;
              &amp;lt;exclude&amp;gt;META-INF/*.SF&amp;lt;/exclude&amp;gt;
              &amp;lt;exclude&amp;gt;META-INF/*.DSA&amp;lt;/exclude&amp;gt;
              &amp;lt;exclude&amp;gt;META-INF/*.RSA&amp;lt;/exclude&amp;gt;
            &amp;lt;/excludes&amp;gt;
          &amp;lt;/filter&amp;gt;
        &amp;lt;/filters&amp;gt;
      &amp;lt;/configuration&amp;gt;
    &amp;lt;/execution&amp;gt;
  &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;&lt;/pre&gt; 
&lt;p&gt;As shown in the figure above, we need to exclude the signature files from the creation of the Uber JAR, in order to avoid &lt;code&gt;SecurityException&lt;/code&gt;s that would be thrown at runtime because the signatures don't match anymore. The &lt;code&gt;&amp;lt;exclude&amp;gt;&lt;/code&gt; element for the &lt;code&gt;org.eclipse.example.arithmetics.dotnet&lt;/code&gt; project is added to prevent the Shade plugin from producing an error because it can't find the project's own JAR. This JAR doesn't exist due to the &lt;code&gt;pom&lt;/code&gt; packaging, which will be explained further below.&lt;/p&gt; 
&lt;p&gt;Now, in order to include the DSL project in the Uber JAR, we need to specify it as a dependency of the &lt;code&gt;org.eclipse.example.arithmetics.dotnet&lt;/code&gt; project, as illustrated in the following figure:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.eclipse.xtext.example.arithmetics&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;org.eclipse.xtext.example.arithmetics&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt;
  &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;org.eclipse.example.arithmetics&lt;/code&gt; dependency is declared as optional because otherwise, the JARs of all of its dependencies would be downloaded unnecessarily when building Maven projects that depend on the &lt;code&gt;org.eclipse.example.arithmetics.dotnet&lt;/code&gt; project.&lt;/p&gt; 
&lt;h2&gt;Converting the Uber JAR to a .NET assembly with IKVM&lt;/h2&gt; 
&lt;p&gt;After creating the Uber JAR in the previous step, we can use IKVM.NET to convert it to a .NET assembly. As there is no currently maintained (or working) Maven plugin for IKVM.NET, we use the &lt;code&gt;exec-maven-plugin&lt;/code&gt; in order to invoke the IKVM.NET compiler.&lt;/p&gt; 
&lt;p&gt;As a preparation for this to work, we need to download the &lt;a href=&quot;http://weblog.ikvm.net/2015/08/26/IKVMNET81ReleaseCandidate0.aspx&quot;&gt;latest release of IKVM.NET&lt;/a&gt; and extract it to some location.&lt;/p&gt; 
&lt;p&gt;By default, we use the directory &lt;code&gt;ikvm&lt;/code&gt; in the user's home folder, so that &lt;code&gt;ikvmc.exe&lt;/code&gt; would be available under &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\ikvm\bin\ikvmc.exe&lt;/code&gt; on Windows systems.&lt;br /&gt;By defining the IKVM.NET location as a Maven property as illustrated below, this default location can be overridden using &lt;code&gt;-Dikvm.home=&amp;lt;directory&amp;gt;&lt;/code&gt; later during the invocation of Maven:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;properties&amp;gt;
  &amp;lt;ikvm.home&amp;gt;${user.home}/ikvm&amp;lt;/ikvm.home&amp;gt;
  &amp;lt;ikvm.dlls.dir&amp;gt;${ikvm.home}/bin&amp;lt;/ikvm.dlls.dir&amp;gt;
  &amp;lt;ikvm.path&amp;gt;${ikvm.home}/bin/ikvmc.exe&amp;lt;/ikvm.path&amp;gt;
&amp;lt;/properties&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;Based on this, we can specify the execution of &lt;code&gt;ikvmc.exe&lt;/code&gt; using the &lt;code&gt;exec&lt;/code&gt; goal of the &lt;code&gt;exec-maven-plugin&lt;/code&gt; plugin.&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;exec-maven-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;executions&amp;gt;
    &amp;lt;execution&amp;gt;
      &amp;lt;id&amp;gt;ikvmCompile&amp;lt;/id&amp;gt;
      &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
      &amp;lt;goals&amp;gt;
        &amp;lt;goal&amp;gt;exec&amp;lt;/goal&amp;gt;
      &amp;lt;/goals&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;executable&amp;gt;${ikvm.path}&amp;lt;/executable&amp;gt;
        &amp;lt;workingDirectory&amp;gt;${project.build.directory}&amp;lt;/workingDirectory&amp;gt;
        &amp;lt;arguments&amp;gt;
          &amp;lt;argument&amp;gt;-target:library&amp;lt;/argument&amp;gt;
          &amp;lt;argument&amp;gt;-out:${project.artifactId}.dll&amp;lt;/argument&amp;gt;
          &amp;lt;argument&amp;gt;${project.build.finalName}-shaded.jar&amp;lt;/argument&amp;gt;
        &amp;lt;/arguments&amp;gt;
      &amp;lt;/configuration&amp;gt;
    &amp;lt;/execution&amp;gt;
  &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/pre&gt; 
&lt;p&gt;We specify the project's &lt;code&gt;target&lt;/code&gt; directory as working directory and pass parameters to create a DLL from the JAR.&lt;/p&gt; 
&lt;h2&gt;.NET Assembly as Maven artifact&lt;/h2&gt; 
&lt;p&gt;As the DLL is the &lt;code&gt;org.eclipse.example.arithmetics.dotnet&lt;/code&gt; project's main artifact, but Maven has no built-in support specific for .NET assemblies, we have to use a workaround:&lt;br /&gt;&lt;br /&gt;We specify the project's packaging to be &lt;code&gt;pom&lt;/code&gt;, which means that technically the &lt;code&gt;pom.xml&lt;/code&gt; itself is the project's primary artifact, and then use the the &lt;code&gt;attach-artifact&lt;/code&gt; goal of the &lt;code&gt;build-helper-maven-plugin&lt;/code&gt; to tell Maven to attach the DLL as a supplementary artifact. On this way, the DLL gets installed in the Maven repository when the Maven &lt;code&gt;install&lt;/code&gt; goal is built and can be used by other projects by adding &lt;code&gt;&amp;lt;type&amp;gt;dll&amp;lt;/type&amp;gt;&lt;/code&gt; to the dependency declaration.&lt;/p&gt; 
&lt;p&gt;The resulting plugin configuration is illustrated below:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;build-helper-maven-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;executions&amp;gt;
    &amp;lt;execution&amp;gt;
      &amp;lt;id&amp;gt;ikvmAttach&amp;lt;/id&amp;gt;
      &amp;lt;goals&amp;gt;
        &amp;lt;goal&amp;gt;attach-artifact&amp;lt;/goal&amp;gt;
      &amp;lt;/goals&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;artifacts&amp;gt;
          &amp;lt;artifact&amp;gt;
            &amp;lt;file&amp;gt;${project.build.directory}/${project.artifactId}.dll&amp;lt;/file&amp;gt;
            &amp;lt;type&amp;gt;dll&amp;lt;/type&amp;gt;
          &amp;lt;/artifact&amp;gt;
        &amp;lt;/artifacts&amp;gt;
      &amp;lt;/configuration&amp;gt;
    &amp;lt;/execution&amp;gt;
  &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;&lt;/pre&gt; 
&lt;h2&gt;Running the build&lt;/h2&gt; 
&lt;p&gt;Now, we can run the build using the MS Build command prompt from the parent directory:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;mvn clean install&lt;/pre&gt; 
&lt;p&gt;There may be several warnings regarding missing classes, which can be safely ignored.&lt;br /&gt;The resulting DLL will be placed in the &lt;code&gt;target&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;In this part of the series, we have described how to transform an Xtext DSL project into a .NET assembly which is ready for use in a C# application.&lt;/p&gt; 
&lt;p&gt;The next blog entry will demonstrate how to use this assembly to create a command-line calculator application.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Flanguage-development-on-.net-with-xtext-part-2-creating-a-dotnet-assembly-from-an-xtext-dsl&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 03 Nov 2016 07:48:44 +0000</pubDate>
	<author>stadler@itemis.de (Bernhard Stadler)</author>
</item>
<item>
	<title>typefox.io: How to Embed a Monaco Editor in a Browser as a Part of My First Task at TypeFox</title>
	<guid isPermaLink="false">http://typefox.io/?p=13874</guid>
	<link>http://typefox.io/how-to-embed-a-monaco-editor-in-a-browser-as-a-part-of-my-first-task-at-typefox</link>
	<description>&lt;p&gt;Hi there, this is Akos. I am the new one at TypeFox, and within this post, I would like to describe you what was my first task after joining TypeFox. Namely, how to embed the &lt;a href=&quot;https://microsoft.github.io/monaco-editor/&quot;&gt;Monaco Editor&lt;/a&gt; in the web browser and how to support a simple expression language from the browser using the &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol&quot;&gt;Language Server Protocol&lt;/a&gt; (LSP).&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;monaco_example_add&quot; class=&quot;alignnone size-full wp-image-13910&quot; height=&quot;300&quot; src=&quot;http://typefox.io/wp-content/uploads/2016/11/monaco_example_add.gif&quot; width=&quot;1452&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I came from the Java world; I did Eclipse plug-in development in the last couple of years. Although I also worked with Java EE technologies and created rich web based applications with various frameworks such as JBoss Seam and Vaadin I never really had to deal with the JavaScript part because the currently used technology somehow magically took care of them under the hood and I had to deal rather with the Java code. Embedding the Monaco Editor was a bit more complicated task and required some additional JavaScript and TypeScript knowledge. Besides that, I also used Gradle, &lt;a href=&quot;http://webpack.github.io/docs/what-is-webpack.html&quot;&gt;Webpack&lt;/a&gt;, and npm.&lt;/p&gt;
&lt;p&gt;First and foremost, what is the Monaco Editor? The Monaco Editor is a browser-based code editor that powers &lt;a href=&quot;https://github.com/Microsoft/vscode&quot;&gt;VS Code&lt;/a&gt;. It supports cool features such as syntax and semantic validation, content assist, syntax coloring, parameter hints, hover, and &lt;a href=&quot;https://code.visualstudio.com/docs/editor/editingevolved&quot;&gt;much more&lt;/a&gt; out of the box. It is well-documented and relatively easy to connect with a language server and integrate into your projects.&lt;/p&gt;
&lt;p&gt;The first thing I needed for this task is the Xtext implementation of the language server. This server is available from the &lt;a href=&quot;http://typefox.io/xtext-2-11-beta-1-is-here&quot;&gt;2.11.0.beta1&lt;/a&gt; milestone version of Xtext and depends on a lightweight library: &lt;a href=&quot;https://github.com/TypeFox/ls-api&quot;&gt;ls-api&lt;/a&gt;. This library is a simple Java binding for the LSP and is going to be replaced by the &lt;a href=&quot;https://projects.eclipse.org/proposals/lsp4j&quot;&gt;LSP4J&lt;/a&gt; Eclipse project in the future. By default, the Xtext language server supports various features, such as content proposals, hover, mark occurrences, and find references, which one can use for almost any kind of DSLs without any further customizations. Besides that, there are a couple of additional features that require custom implementation; for instance the signature helper which provides parameter hints. Usually, one single language is supported by one server; however, the Xtext server is capable of supporting multiple Xtext languages at the same time. The only requirement is that the actual implementation of the language should be available from the classpath of the server as a bundled jar.&lt;/p&gt;
&lt;p&gt;I had to prepare some generic glue code that acts as a web socket server endpoint and handles the lifecycle of the Xtext language server instance associated with the web socket session. On session-open event, it creates a new server instance and caches it and indeed on the web socket session-close event it shuts down the server and removes it from the cache. Besides that, to be able to support Guice based dependency injection in RESTful web services I used the &lt;a href=&quot;https://github.com/Squarespace/jersey2-guice&quot;&gt;jersey2-guice&lt;/a&gt; library which supports DI within the Jersey 2.x implementation of the &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=311&quot;&gt;JAX-RS/JSR-311&lt;/a&gt; specification.&lt;/p&gt;
&lt;p&gt;Once the server-side was ready, and our DSL was available on the classpath, I had to implement a language-specific signature helper. I added some tests and switched to the client-side code. On the client-side, I used mostly TypeScript with some additional JavaScript code and invoked Webpack to compile TypeScript to JavaScript and to build the dependency graph with all of my static assets to create one single uglified JavaScript file for the browser. The client code is responsible for creating a web socket and connecting to the Xtext language server. Once the connection is successfully established between the client and server, the language gets registered into a new Monaco Editor instance. Right after the editor instantiation, both the syntax coloring and the auto-bracket insertion was configured in the client code. Currently, the LSP does not support syntax coloring, so this had to be added to the JavaScript code.&lt;/p&gt;
&lt;p&gt;The last remaining part of this task was to build a web-archive file and deploy it. Since not all environments have installed Node.js on it, an individual Node.js task was added to the Gradle configuration to install Node.js with npm. Npm can install Webpack and Webpack can gather all modules and their direct and transitive dependencies reading the content of the package.json of our module. Finally, Gradle creates a war file which can be optionally deployed on a Tomcat server using the &lt;a href=&quot;https://github.com/akhikhl/gretty&quot;&gt;Gretty&lt;/a&gt; Gradle plug-in.&lt;/p&gt;
&lt;p&gt;This example web-based Monaco Editor, which was presented at &lt;a href=&quot;https://www.eclipsecon.org/europe2016/session/language-server-protocol-explained&quot;&gt;EclipseCon Europe&lt;/a&gt; last week, is available &lt;a href=&quot;http://monaco-demo.typefox.io/&quot;&gt;here&lt;/a&gt;. We are planning to make both the generic glue code (used for the server) and the Monaco Editor code accessible in the future. Once the code is available under the EPL 1.0 license, we’ll come back to you with another blog post with all the technical details and pitfalls. If you cannot wait, feel free to drop me a mail.&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;div class=&quot;fusion-button-wrapper&quot;&gt;&lt;a class=&quot;fusion-button button-flat button-round button-large button-default button-1&quot; href=&quot;http://monaco-demo.typefox.io&quot; target=&quot;_self&quot;&gt;&lt;span class=&quot;fusion-button-text&quot;&gt;Try the Monaco Demo&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 02 Nov 2016 08:40:05 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: EclipseCon Europe: A Great Week for All</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/L6TL93Gcs9M/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/L6TL93Gcs9M/</link>
	<description>Thanks to the sponsors, speakers, and attendees who made EclipseCon Europe 2016 such a success. Missed some talks? We'll post the YouTube playlist soon.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/L6TL93Gcs9M&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 31 Oct 2016 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter - Discover Eclipse Runtimes</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/aFUwHYND83c/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/aFUwHYND83c/</link>
	<description>This month's newsletter features Eclipse runtime projects: Equinox, Golo, Jetty, OMR, and Vert.x.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/aFUwHYND83c&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 31 Oct 2016 14:20:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse IoT Announces Third Edition of the Open IoT Challenge</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/Y1gd5rTpzFw/openiotchallenge3.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/Y1gd5rTpzFw/openiotchallenge3.php</link>
	<description>IoT enthusiast? This Challenge is for you! Submit your IoT solution proposal by November 25.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/Y1gd5rTpzFw&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 31 Oct 2016 13:30:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: Save the date: Eclipse DemoCamp 05.12.2016</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=27389</guid>
	<link>http://eclipsesource.com/blogs/2016/10/31/save-the-date-eclipse-democamp-05-12-2016/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We are pleased to invite you to participate to the Eclipse DemoCamp Munich 2016. Like in the past years, we continue in our tradition of hosting a “Christmas DemoCamp”. Please save the following date and mark your calendars on December 5th 2016 for the next Eclipse DemoCamp in Munich!  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We offer 80 seats, but we usually receive around 200 registrations. &lt;strong&gt;To give everybody the same chance, registration for the event will start exactly on November 7th 2016 2pm.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;More details on the event and the possibility to register you will find here:&lt;br /&gt;
&lt;/span&gt;&lt;a href=&quot;https://www.eventbrite.de/e/eclipse-democamp-december-2016-tickets-28833687335&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;https://www.eventbrite.de/e/eclipse-democamp-december-2016-tickets-28833687335&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in giving a talk, please send your presentation proposal to &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;jhelming@eclipsesource.com for consideration. There are always more proposals than slots in the agenda, so we will make a selection from submitted proposals.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We are looking forward to your registration and seeing you in December!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=Save+the+date%3A+Eclipse+DemoCamp+05.12.2016&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2016/10/31/save-the-date-eclipse-democamp-05-12-2016/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2016/10/31/save-the-date-eclipse-democamp-05-12-2016/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2016/10/31/save-the-date-eclipse-democamp-05-12-2016/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2016/10/31/save-the-date-eclipse-democamp-05-12-2016/&amp;amp;t=Save+the+date%3A+Eclipse+DemoCamp+05.12.2016&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/10/31/save-the-date-eclipse-democamp-05-12-2016/#respond&quot;&gt;Leave a Comment&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/democamp/&quot; title=&quot;democamp Tag&quot;&gt;democamp&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf-forms/&quot; title=&quot;emf forms Tag&quot;&gt;emf forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/democamp/&quot; title=&quot;democamp Tag&quot;&gt;democamp&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf-forms/&quot; title=&quot;emf forms Tag&quot;&gt;emf forms&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 31 Oct 2016 13:00:55 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Oomph 05: Git checkout</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-5266772667005025328</guid>
	<link>http://codeandme.blogspot.com/2016/10/oomph-05-git-checkout.html</link>
	<description>In this tutorial we will checkout a git repository and import its projects into the workspace.&lt;br /&gt;&lt;br /&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/oomph_05_git_checkout.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/oomph_05_git_checkout.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/oomph/05_git_checkout&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.   &lt;br /&gt;&lt;br /&gt;For a list of all Oomph related tutorials see my &lt;a href=&quot;http://codeandme.blogspot.co.at/p/oomph-articles.html&quot; target=&quot;_blank&quot;&gt;Oomph Tutorials Overview&lt;/a&gt;.&lt;br /&gt;&lt;u&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/u&gt;&lt;u&gt;&lt;b&gt;Step 1: Git clone task&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;First open your &lt;i&gt;CodeAndMe.setup&lt;/i&gt; file and look for a new child called &lt;i&gt;Git Clone&lt;/i&gt;. Quite likely you will find it under &lt;i&gt;Additional Tasks&lt;/i&gt;. All tasks available under that submenu are currently not installed. By selecting them eclipse triggers a background job to install the necessary components. Before you can use it a restart of your workbench will be required.&lt;br /&gt;&lt;br /&gt;Once you added a &lt;i&gt;Git Clone&lt;/i&gt; task open its &lt;i&gt;Properties&lt;/i&gt;. The bare minimum information to provide is the &lt;i&gt;Remote URI&lt;/i&gt;. Set it to your clone location, eg. https://github.com/Pontesegger/codeandme.git&lt;br /&gt;&lt;br /&gt;We will also provide an &lt;i&gt;ID&lt;/i&gt; so we can reference that setup task from other tasks later during the install. Therefore set &lt;i&gt;ID&lt;/i&gt; to &lt;i&gt;codeandme.git.clone&lt;/i&gt;.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-gIuyHT5JOAA/WATIiiyPRKI/AAAAAAAAAs0/0z-s1CX_FGUMk0gF5Z-dYxrJXxv_bQMqgCLcB/s1600/oomph_05_01.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-gIuyHT5JOAA/WATIiiyPRKI/AAAAAAAAAs0/0z-s1CX_FGUMk0gF5Z-dYxrJXxv_bQMqgCLcB/s1600/oomph_05_01.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;The checkout &lt;i&gt;Location&lt;/i&gt; is typically chosen by the user and should not be defined in the setup file. Users will set this during installation by using the &lt;i&gt;Git clone location rule&lt;/i&gt; variable.&lt;br /&gt;&lt;u&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/u&gt;&lt;u&gt;&lt;b&gt;Step 2: Import projects&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;The clone task will create a local copy of the repository but that does not mean that its projects are already visible in the workspace.&lt;br /&gt;&lt;br /&gt;We need to add a dedicated &lt;i&gt;Projects Import&lt;/i&gt; task. Further add a subnode of type &lt;i&gt;Source Locator&lt;/i&gt; to it. Now switch to its &lt;i&gt;Properties&lt;/i&gt; and set the &lt;i&gt;Root Folder&lt;/i&gt;. Instead of providing a fixed location here we will refer to the Git Clone task we defined earlier.&lt;br /&gt;&lt;br /&gt;When a task has an ID, we can refer to it directly using a variable: ${task.id}. Further all task properties are available by just adding the property name: ${task.id.property_name}.&lt;br /&gt;&lt;br /&gt;To get the path where our git repository was checked out to we can use: ${codeandme.git.clone.location}&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-xwRX2IO2rSk/WATJDX2zDJI/AAAAAAAAAs4/QaPUtATB1KQZ_Z5n17ZvL0wjW-JvPSbpgCLcB/s1600/oomph_05_02.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://3.bp.blogspot.com/-xwRX2IO2rSk/WATJDX2zDJI/AAAAAAAAAs4/QaPUtATB1KQZ_Z5n17ZvL0wjW-JvPSbpgCLcB/s1600/oomph_05_02.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Give it a try to see that your task configuration is correct.&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Mon, 31 Oct 2016 10:24:40 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Melanie Bats: Sirius 4.1 is Out! What’s Inside ? Sadness</title>
	<guid isPermaLink="false">http://melb.enix.org/?p=404</guid>
	<link>http://melb.enix.org/sirius/sirius-4-1-is-out-whats-inside-sadness/</link>
	<description>&lt;p dir=&quot;ltr&quot;&gt;That’s too sad! &lt;a href=&quot;https://www.eclipsecon.org/europe2016/&quot;&gt;EclipseCon Europe&lt;/a&gt; finished yesterday.&lt;img alt=&quot;&quot; class=&quot;aligncenter&quot; height=&quot;163&quot; src=&quot;https://lh5.googleusercontent.com/TPpOymkpFHaoSaG6PaO6QOx-pkEHfyb30AJXutJRvzseHcYrVLjXqjHvLW6RmEtLL-XQLhaNwdAXJ5ZLoTbcite9ThdRFPFMAvWAAKw7YbJU2XAB9AkGH-QqFwd-feKlnP9VSjCZ&quot; style=&quot;font-weight: 300;&quot; width=&quot;180&quot; /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;It was again a great conference, with inspiring talks and excellent discussions with different members of the Eclipse community. These moments with our community are motivating us to prepare the future of &lt;a href=&quot;https://www.eclipse.org/sirius&quot;&gt;Eclipse Sirius&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;span style=&quot;font-weight: 300;&quot;&gt;So what’s next? What would we cook for you in Eclipse Oxygen?&lt;/span&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;img alt=&quot;3ba14416270031.5632259d47f7e.jpg&quot; class=&quot;aligncenter&quot; height=&quot;518px;&quot; src=&quot;https://lh5.googleusercontent.com/86Q-tucOegM1hBilPjX7MnVz799SAXs06VYsr00cG0vfvG6yuYIQd4KOsh8JBcRZ39CNjlMBiNEe2B55ZVn8LAZr24oH_fhcntTu3CxBIN3_fsQ2DoXhzIKQWEPRnXJIudqgAIrUTJM&quot; width=&quot;481px;&quot; /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span style=&quot;font-weight: 300;&quot;&gt;As we already said in our talk, we are already preparing the future with Sirius 4.1 when we introduce the &lt;em&gt;DRepresentationDescriptor&lt;/em&gt;. This internal change has no impact on normal users: it was made as a first step to &lt;strong&gt;prepare for better scalability&lt;/strong&gt; down the road. For specifiers and developers who wrote code that depends on the internal organisation of the *.aird files, you may need to adapt your code.&lt;/span&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;To learn more about the Sirius roadmap, be sure to not missed Cedric’s talk at &lt;a href=&quot;http://www.siriuscon.org/&quot;&gt;SiriusCon&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter&quot; height=&quot;365&quot; src=&quot;https://lh3.googleusercontent.com/gMyJVnQOtgkYSQqj-GrFnmxLwmRNKrB1j2UNDgYoKJw3bIyY3NDYf3CBx3N-AFKe9FInu0jWqeptY63fX3VsqHoaxijTFHodZt2wh3t3stErq1NZ0boxgaA-B_jiRNiF9DbGo6w_&quot; width=&quot;408&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 300;&quot;&gt;I will also give a talk with Stéphane specifically about the Properties view feature, we will detail what’s possible with this new feature:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p dir=&quot;ltr&quot;&gt;Let Sirius automatically create default properties views for your designer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p dir=&quot;ltr&quot;&gt;Create a simple properties view description and customize it as you do for other types of representations thanks to the following widgets: label, text, text area, checkbox, radio, list, reference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p dir=&quot;ltr&quot;&gt;Use the new EMF.Edit customizations provided by Sirius&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p dir=&quot;ltr&quot;&gt;Discover the power of the dynamic mappings to automatically create the properties view fields for the different types of elements used in your metamodels&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p dir=&quot;ltr&quot;&gt;Understand how to provide filters and validation programmatically&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span style=&quot;font-weight: 300;&quot;&gt;Learn how to contribute some custom widgets&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;ltr&quot;&gt;And much more!&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Do not look for excuses, SiriusCon is where you have to be if you are interested in graphical modeling: easy to come as it will be held in Paris near the tour Eiffel, it’s a one day event, and it’s free. The &lt;a href=&quot;http://www.siriuscon.org/#program&quot;&gt;program&lt;/a&gt; promises to be interesting with talks about case studies on the morning, technical sessions by the afternoon and a clinic all the day.&lt;/p&gt;
&lt;p&gt;I am counting on you &lt;a href=&quot;http://www.siriuscon.org/register.php&quot;&gt;being there&lt;/a&gt; on November 15th and I hope to see you soon at SiriusCon!&lt;/p&gt;</description>
	<pubDate>Fri, 28 Oct 2016 05:30:51 +0000</pubDate>
</item>
<item>
	<title>Pascal Rapicault: 5 reasons to use EGerrit - #3, In-place comments</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-27225531.post-4283871304406313285</guid>
	<link>http://prapicault.blogspot.com/2016/10/5-reasons-to-use-egerrit-3-in-place.html</link>
	<description>To celebrate the release of &lt;a href=&quot;http://wiki.eclipse.org/EGerrit/New_and_Noteworthy/1.1.1&quot;&gt;EGerrit 1.1&lt;/a&gt;, we are enumerating the &lt;a href=&quot;http://prapicault.blogspot.ca/2016/10/5-reasons-to-use-egerrit-5-being-in.html&quot;&gt;top&lt;/a&gt; &lt;a href=&quot;http://prapicault.blogspot.com/2016/10/5-reasons-to-use-egerrit-4-simple.html&quot;&gt;5&lt;/a&gt; features of the tool.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;b&gt;Reason #3 – In-place comments.&lt;/b&gt;&lt;/h3&gt;Performing a review means commenting. As you go through the changes, you want to enter comments right here and there, and this can be done directly from the compare editor! Simply start typing in the editor and you will see the new text appear with a yellow background indicating that this is a comment (see picture).&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-trTf7rtUngI/WA9ybxR53mI/AAAAAAAAAUU/gSLYvjNJdik51PrR4lOXtYrwCrcKBJtywCK4B/s1600/800px-Compare1.0.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;360&quot; src=&quot;https://2.bp.blogspot.com/-trTf7rtUngI/WA9ybxR53mI/AAAAAAAAAUU/gSLYvjNJdik51PrR4lOXtYrwCrcKBJtywCK4B/s640/800px-Compare1.0.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Saving the editor will push the comments as drafts.  Of course comments that have been entered by other users are also shown in place. &lt;br /&gt;You can download EGerrit from the &lt;a href=&quot;http://download.eclipse.org/releases/neon&quot; target=&quot;_blank&quot;&gt;Neon release &lt;/a&gt;repo or from the &lt;a href=&quot;http://marketplace.eclipse.org/content/egerrit&quot; target=&quot;_blank&quot;&gt;Eclipse Marketplace&lt;/a&gt;. For questions, you can connect with us on &lt;a href=&quot;https://dev.eclipse.org/mailman/listinfo/egerrit-dev&quot;&gt;egerrit-dev@eclipse.org&lt;/a&gt;; and for bugs or to take a peek at the future you can see our &lt;a href=&quot;https://tuleap.eclipse.org/plugins/agiledashboard/?group_id=102&amp;amp;action=showKanban&amp;amp;id=6#/kanban&quot; target=&quot;_blank&quot;&gt;Kanban board&lt;/a&gt;.</description>
	<pubDate>Fri, 28 Oct 2016 05:30:24 +0000</pubDate>
	<author>noreply@blogger.com (Pascal)</author>
</item>
<item>
	<title>Jeremie Bresson: Asciidoctor instead of MediaWiki?</title>
	<guid isPermaLink="true">http://jmini.github.io/blog/2016/2016-10-28_from_mediawiki_to_asciidoc.html</guid>
	<link>http://jmini.github.io/blog/2016/2016-10-28_from_mediawiki_to_asciidoc.html</link>
	<description>&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;During &lt;a href=&quot;https://www.eclipsecon.org/europe2016/&quot;&gt;EclipseCon Europe 2016&lt;/a&gt; we had a great BoF Session about documentation with Asciidoctor at Eclipse. A lot of subjects were discussed, from the editing possibilities inside or outside Eclipse IDE to the best toolchains for document generation/customization.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;BoFs Session Schedule at EclipseCon Europe 2016&quot; src=&quot;http://jmini.github.io/blog/2016/2016-10-28_bofs_eclipsecon_europe_2016.jpg&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;One topic that was discussed during the meeting was the conversion of MediaWiki documentation to the AsciiDoc format. I am happy to blog about this topic and to propose a solution.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;A lot of Eclipse projects are using the &lt;a href=&quot;https://wiki.eclipse.org/&quot;&gt;Eclipse MediaWiki instance&lt;/a&gt; for their documentation. Maybe I can summarize my vision on this topic: I consider the usage of a Git repository better as a wiki engine. A wiki engine is not enough when it comes to documentation of different versions of your project/product (git branches, cherry pick…​). If you host the repository on GitHub (it works also with GitLab) and if you use one of the markup syntaxes supported by the online editor, you get almost the same experience as with a wiki engine (online edition, online preview of changes, navigation in the history, diffs…​). Reviews and discussions inside pull requests are a great way to collaborate. Having also everything offline is a big plus (I work a lot in the train). Amongst the different markup syntaxes you can choose, I consider the AsciiDoc format as the best option (management of code snippets, callout support in listings blocs, variable substitution and conditional inclusion, multiple output formats, live preview in browser during edition in any text editor, easy integration in existing build toolchain, possibility to extend the language with custom macros…​). In my opinion Asciidoctor is becoming a state of the art documentation toolchain in many projects.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;This immediately raises the next question: what can we do with the great content we have on the Eclipse wiki? How can it be migrated to the AsciiDoc format? In my opinion the &lt;a href=&quot;https://eclipse.org/mylyn/docs&quot;&gt;Mylyn Wikitext project&lt;/a&gt; can help, but an &lt;code&gt;AsciiDocDocumentBuilder&lt;/code&gt; is missing. I have opened &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=506643&quot;&gt;Bug 506643&lt;/a&gt; for that and &lt;a href=&quot;https://git.eclipse.org/r/84040&quot;&gt;contributed&lt;/a&gt; a first implementation. My code will now go through the eclipse review process. To test it today, you need to check out the repo (and the corresponding gerrit change).&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Here a simple example:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;title&quot;&gt;
  Listing 1. Example MediaWiki document
 &lt;/div&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre&gt;'''Lorem ipsum''' sed tempor euismod elit, et eleifend tellus lacinia a.

=== Penatibus et magnis

Pellentesque ut ''lorem lorem''.

[[Image:foo.png|Foo image]]

Nulla ut sapien tellus. Quisque id semper nulla. Nullam facilisis risus turpis.

* Cras posuere tempor urna
* Laoreet pharetra diam rhoncus at
* Quisque ornare diam eu iaculis auctor.

Pellentesque tincidunt ultricies varius. [http://eclipse.org/ Lorem ipsum dolor] sit amet, consectetur adipiscing elit.

Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Suspendisse potenti.&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;That will be converted to:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;title&quot;&gt;
  Listing 2. Result of the conversion to AsciiDoc
 &lt;/div&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre&gt;*Lorem ipsum* sed tempor euismod elit, et eleifend tellus lacinia a.

=== Penatibus et magnis

Pellentesque ut _lorem lorem_.

image:foo.png[title=&quot;Foo image&quot;]

Nulla ut sapien tellus. Quisque id semper nulla. Nullam facilisis risus turpis.

* Cras posuere tempor urna
* Laoreet pharetra diam rhoncus at
* Quisque ornare diam eu iaculis auctor.

Pellentesque tincidunt ultricies varius. link:http://eclipse.org/[Lorem ipsum dolor] sit amet, consectetur adipiscing elit.

Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Suspendisse potenti.&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Of course my tool has certainly some limitations. Markup conversion is never an easy task. I think that the MediaWiki parser provided by the Mylyn Wikitext project is a good choice, because it is already used for the generation of some eclipse help pages. For the conversion to AsciiDoc there is already some support in the Wikitext framework (AsciiDoc is just an other output Markup there). I just created a new class: &lt;code&gt;AsciiDocDocumentBuilder&lt;/code&gt; (plus an other one for the test suite). I have used the &lt;code&gt;MarkdownDocumentBuilder&lt;/code&gt; as base and adapted it for AsciiDoc. I consider my implementation as a first usable version. Any feedback is welcomed (on the Bug, on Gerrit, twitter or on the mailing list). Depending on the feedback, I will be happy to iterate and to improve it for concrete use cases.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;By the way, if an Eclipse Project wants to migrate and start to use Asciidoctor, I will be happy to help as much as I can.&lt;/p&gt; 
&lt;/div&gt;</description>
	<pubDate>Thu, 27 Oct 2016 22:00:00 +0000</pubDate>
</item>
<item>
	<title>Melanie Bats: Sirius 4.1 is Out! What’s Inside ? Anger</title>
	<guid isPermaLink="false">http://melb.enix.org/?p=399</guid>
	<link>http://melb.enix.org/sirius/sirius-4-1-is-out-whats-inside-anger/</link>
	<description>&lt;p dir=&quot;ltr&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter&quot; height=&quot;199&quot; src=&quot;https://lh5.googleusercontent.com/i-BbA6KpaRVD8UnMMUT6OtGUdDJO7ZyRe-lz-Ck0Bn8n1Gf7zR7m516l9UYGDteWGPboc8KDH3bkfqZgXKhO9KqFXApNZco_LjfjEy4kKPaRg5vf44MifWSusoSdaSWyVEvhY0cu&quot; style=&quot;font-weight: 300;&quot; width=&quot;160&quot; /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Do you ever feel that? This week I often dreamt I had the gift of ubiquity… I could replicate myself and be in several places at once. It would be a really useful skill to participate to EclipseCon Europe. I am angry to not be able to see all the talks I would have liked to attend. Happily, as every year all the slides will be available on the EclipseCon website and most of the talks are recorded and will be available on the Eclipse Foundation &lt;a href=&quot;https://www.youtube.com/user/EclipseFdn&quot;&gt;youtube channel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you missed our talk yesterday, do not miss our &lt;a href=&quot;https://www.eclipsecon.org/europe2016/session/sirius-41-let-me-sirius-you&quot;&gt;slides available online&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 27 Oct 2016 05:30:49 +0000</pubDate>
</item>
<item>
	<title>itemis: BMW builds AUTOSAR backbone with open source projects sponsored by itemis</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/bmw-builds-autosar-backbone-with-open-source-projects-sponsored-by-itemis</guid>
	<link>https://blogs.itemis.com/en/bmw-builds-autosar-backbone-with-open-source-projects-sponsored-by-itemis</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;On &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;September 28th the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;9th AUTOSAR Open Conference took place in Gothenburg.&lt;/span&gt; From an Eclipse/Open Source point of view, &lt;a href=&quot;http://www.autosar.org/fileadmin/files/events/2016-09-28-9th-autosar-open/AUTOSAR_Methodology%40BMW_JAEGER.pdf&quot;&gt;Bernd Jäger's (BMW) talk on their Symphony project&lt;/a&gt; is very interesting.&lt;/p&gt;  
&lt;p&gt;&lt;span&gt;BMW&lt;/span&gt;&lt;span&gt; has built&lt;/span&gt; the impressive AUTOSAR ECU engineering backbone with Eclipse open source technologies. Engineering data is consolidated from different data sources, merged in a big common model and then exported to AUTOSAR.&lt;/p&gt; 
&lt;p&gt;Bernd Jäger mentions in his slides a few projects and I am happy to see that some of them are sponsored mainly or in part by itemis. Let us have a look, what the benefits of some of these technologies are.&lt;/p&gt; 
&lt;h3&gt;Xtend: F&lt;span&gt;lexible and expressive Java-dialect&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;Obviously, we can infer that there are a lot of model-to-model transformations. &lt;a href=&quot;http://www.eclipse.org/xtend/&quot;&gt;Xtend&lt;/a&gt; supports these transformations with its &quot;create&quot; statements that help a lot to avoid caching and multiple passes. Also, you can create strong transformator frameworks &lt;span&gt;with active annotations&lt;/span&gt;. In addition, its concise syntax and lambda support makes it a better Java-dialect – not only for transformations but for any code. &lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;Xtext: Develop applications based on text based languages&lt;/span&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.itemis.com/en/xtext/&quot;&gt;Xtext&lt;/a&gt; supports the creation of textual domain specific languages. It can be used e.g. to easily create parsers for input files that follow a textual syntax (e.g. a LIN description file - .ldf). In addition, you can create languages for modifying, managing and serializing EMF models. This helps e.g. in creating test data.&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;Artop: Sphinx based framework &lt;/h3&gt; 
&lt;p&gt;As the common platform for Eclipse/Java based AUTOSAR tooling &lt;a href=&quot;https://www.artop.org/&quot;&gt;Artop&lt;/a&gt; provides you with an implementation of the AUTOSAR metamodel, complete with (de-) serialization to ARXML. It is the most convenient way to read, process and write AUTOSAR.&lt;/p&gt; 
&lt;h3&gt;Sphinx: Eclipse Modeling Framework-Extension&lt;/h3&gt; 
&lt;p&gt;Artop is based on &lt;a href=&quot;https://www.eclipse.org/sphinx/&quot;&gt;Sphinx&lt;/a&gt; – a powerful open source project that manages complex models and adds a strong framework on top of the modelling supported by Eclipse EMF.&lt;/p&gt; 
&lt;p&gt;All of the technologies above have been created and/or are maintained with the involvement of itemis. It is great to see the acceptance they find in the automotive industry.&lt;/p&gt; 
&lt;p&gt;If you want to know more about the open source projects of itemis &lt;a href=&quot;https://info.itemis.com/contact&quot;&gt;don't hesitate to get in touch with us!&lt;/a&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fbmw-builds-autosar-backbone-with-open-source-projects-sponsored-by-itemis&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 26 Oct 2016 10:37:28 +0000</pubDate>
	<author>graf@itemis.de (Andreas Graf)</author>
</item>
<item>
	<title>Christian Pontesegger: ECE 2016: Elevate your IDE with scripts</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-6561843788357367156</guid>
	<link>http://codeandme.blogspot.com/2016/10/ece-2016-elevate-your-ide-with-scripts.html</link>
	<description>Being at EclipseCon Europe for me is always a highlight throughout the year. While I am enjoying the talks and discussions (and some beer) you might be interested in what to expect from &lt;a href=&quot;https://www.eclipsecon.org/europe2016/session/elevate-your-ide-scripts&quot; target=&quot;_blank&quot;&gt;my talk&lt;/a&gt; on &lt;a href=&quot;https://www.eclipse.org/ease/&quot; target=&quot;_blank&quot;&gt;EASE &lt;/a&gt;today:&lt;br /&gt;&lt;br /&gt;Well I guess lots of you are already familiar with the basic concept of running scripts in Eclipse. Therefore the talk will focus on scripts that augment the IDE (or any other RCP application) in special ways. We will use them to add toolbar and menu items, we will create a custom builder prototype, learn something about the Event Broker and finally have a look at script deployment methods. Therefore we will use a generic keyword mechanism which can be extended easily to your own needs.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-8syg5m-cOmE/VIHE9VTtFpI/AAAAAAAAAgk/vWIxHfxmn5EImfx-KL1-A57Gb4Yn9Kh4QCPcB/s1600/explore2.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-8syg5m-cOmE/VIHE9VTtFpI/AAAAAAAAAgk/vWIxHfxmn5EImfx-KL1-A57Gb4Yn9Kh4QCPcB/s1600/explore2.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Even if you do not care about scripting but prefer pure Java this talk might be for you. Using EASE you may extend the IDE without deployment of features (and without a restart).&lt;br /&gt;&lt;br /&gt;As I am a big fan of live sessions we will rush through some slides in 3 minutes and use the rest for a live demo. &lt;br /&gt;&lt;br /&gt;Got your interest? Join me on Wednesday, 11:45 at Silchersaal.</description>
	<pubDate>Wed, 26 Oct 2016 08:03:16 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>

</channel>
</rss>
